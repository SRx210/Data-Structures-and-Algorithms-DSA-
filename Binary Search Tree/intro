Binary Search Tree (BST) - Introduction

A Binary Search Tree (BST) is a type of binary tree where each node has at most two children: a left child and a right child. For any given node:

- The left child’s value is less than the node’s value.
- The right child’s value is greater than the node’s value.

This property helps in performing operations like searching, insertion, and deletion more efficiently compared to other types of binary trees.

Basic Operations:
1. **Insertion**:
   Inserting a new node involves finding the correct position based on the value, ensuring the BST properties are maintained.

2. **Search**:
   Searching for a value in the tree involves starting at the root and recursively moving left or right based on the value being smaller or larger.

3. **Deletion**:
   Deleting a node involves handling three cases:
   - If the node is a leaf, simply remove it.
   - If the node has one child, replace it with its child.
   - If the node has two children, find the in-order successor (or predecessor), replace the node, and remove the successor (or predecessor).

4. **Traversal**:
   BSTs can be traversed in multiple ways:
   - **In-order**: Left subtree → Root → Right subtree (produces sorted order of values).
   - **Pre-order**: Root → Left subtree → Right subtree.
   - **Post-order**: Left subtree → Right subtree → Root.

Time Complexity:
- **Insertion**: O(log n) on average, O(n) in the worst case (for unbalanced trees).
- **Search**: O(log n) on average, O(n) in the worst case.
- **Deletion**: O(log n) on average, O(n) in the worst case.

BSTs are efficient for applications that require fast lookups, insertions, and deletions, making them a widely used data structure in algorithms.

End of Introduction.
